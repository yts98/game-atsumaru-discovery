from bs4 import BeautifulSoup
import itertools
import os
import re
import json

if not os.path.isdir('games'):
    exit('Please download games at first.')

frameworks = ['Akashic', 'EasyRPG', 'GameMaker', 'RPGMaker', 'RPGMakerMZ', 'SUCCESS', 'Tonyu', 'Tyrano', 'Unity', 'VisualNovelMaker']
frameworks_2 = [f'{value}_2' for value in frameworks]
framework_games = {key: [] for key in [*frameworks, *frameworks_2, 'other']}
known_games = []

if os.path.isfile('data/catagory.json'):
    with open('data/catagory.json', 'r') as r:
        catagories = json.load(r)
        for framework in frameworks:
            if framework in catagories.keys():
                framework_games[framework] = catagories[framework]
                known_games.extend(framework_games[framework])

score = {}
ignored_games = [
    55, 529, 596, 1250, 3477, 7764, 9022, 13915,
    165,
    2742,
    3621, 3736, 3765,
    5404, 5461, 5530, 5608, 5614, 5749,
    7735, 7956, 8518, 8569, 9540, 9799, 12097, 12356, 12988, 13987,
    8025,
    11353, 14360, 17211, 18014, 23340, 25791,
    11833, 12231,
    14174,
    15302,
    17434, 17646, 18005, 18146,
    17774,
    22144,
    29249, 29267,
    29320, 29532, 29752, 29754,
]

removed_games = [
    15714, 24562, 27858,
]

if 'catagories' in locals().keys():
    for games in filter(lambda item: item[0] not in frameworks, catagories.items()):
        print(games[0], len(games[1]))

# itertools.chain(*[map(lambda game_id: f'games/gm{game_id}', games[1]) for games in filter(lambda item: item[0] not in frameworks, framework_games.items())])
for game_root in ['games/']:
    for dirpath, dirnames, filenames in os.walk(game_root):
        match = re.search(r'^games/gm([0-9]+)/[0-9]+$', dirpath)
        if match:
            assert 'index.html' in filenames, filenames
            game_id = int(match[1])
            if game_id in known_games or game_id in removed_games:
                continue
            score[game_id] = dict.fromkeys([*frameworks, 'other'], 0)
            if game_id in ignored_games:
                score[game_id]['other'] += 1
                continue
            with open(os.path.join(dirpath, 'index.html'), 'r') as findex:
                html = findex.read()
                if re.search(r'<!-- Generated by akashic-cli-export-html@[0-9]+\.[0-9]+\.[0-9]+\. -->', html):
                    score[game_id]['Akashic'] += 1
                    continue
                elif html.find('<!-- Generated by GameMaker:Studio http://www.yoyogames.com/gamemaker/studio -->') >= 0:
                    score[game_id]['GameMaker'] += 1
                    continue
                elif (html.find('<div id="pixiview"></div>') >= 0 or html.find('<div id="tyrano_base" class="tyrano_base" style="overflow:hidden" unselectable="on" ondragstart="return" false></div>') >= 0) \
                    and re.search(r'<script type="text\/javascript" src="(?:js/)SU_Api\.js"></script>', html):
                    score[game_id]['SUCCESS'] += 1
                    continue
                elif html.find('<script src="https://edit.tonyu.jp/js/runtime/detectUnsupported.js"></script>') >= 0:
                    score[game_id]['Tonyu'] += 1
                    continue
                soup = BeautifulSoup(html, features='lxml')
                for link in soup.find_all('link'):
                    assert link.string is None
                    assert 'href' in link.attrs
                    if link.attrs.get('rel') == ['icon'] and link.attrs.get('href') == 'icon/icon.png' \
                        or link.attrs.get('rel') == ['icon'] and link.attrs.get('href') == 'icon/app-icon.png' \
                        or link.attrs.get('rel') == ['apple-touch-icon'] and link.attrs.get('href') == 'icon/icon.png' \
                        or link.attrs.get('rel') == ['stylesheet'] and link.attrs.get('href') == 'fonts/gamefont.css':
                        score[game_id]['RPGMaker'] += 1
                    elif link.attrs.get('rel') == ['stylesheet'] and link.attrs.get('href') == 'css/game.css':
                        score[game_id]['RPGMakerMZ'] += 1
                    elif link.attrs.get('href') in [
                        './tyrano/tyrano.css',
                        './tyrano/animate.css',
                        './tyrano/libs/jquery-ui.css',
                        './tyrano/libs/jquery-ui/jquery-ui.css',
                        './tyrano/libs/alertify/alertify.core.css',
                        './tyrano/libs/alertify/alertify.default.css',
                        './tyrano/libs/remodal/remodal.css',
                        './tyrano/libs/remodal/remodal-default-theme.css',
                        './tyrano/libs/textillate/assets/animate.css',
                    ]:
                        score[game_id]['Tyrano'] += 1
                    elif link.attrs.get('href') in [
                        'TemplateData/favicon.ico',
                        'TemplateData/style.css',
                    ]:
                        score[game_id]['Unity'] += 1
                    else:
                        score[game_id]['other'] += 1
                        if score[game_id]['Unity'] >= 1:
                            print(game_id, link, link.attrs.get('rel'), link.attrs.get('href'))
                for script in soup.find_all('script'):
                    if script.string == 'parent.connectAtsumaru(window);':
                        continue
                    elif script.string is not None:
                        script_lines = list(map(lambda x: x.strip(), script.string.strip().split('\n')))
                        if script.string.find('@akashic/akashic-engine') >= 0 \
                            or script.string.find('window.gLocalAssetContainer["game.json"]') >= 0:
                            score[game_id]['Akashic'] += 1
                        elif script_lines[0].strip() == 'window.launchMain()' \
                            or script_lines[0].strip().startswith('var LZString={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_f:String.fromCharCode,compres') \
                            or script_lines[0].strip().startswith('eval(LZString.decompressFromEncodedURIComponent("BQMwrgdgxgLglgewqAlAbziYMCeAHAUwRAAICAPPBAJxgGcBeJgIgQCMArA2ZgMl9yFiJAL'):
                            score[game_id]['RPGMaker'] += 1
                        elif set(script_lines) == set([
                            'try{',
                            'window.jQuery = window.$ = require(\'./tyrano/libs/jquery-3.4.1.min.js\');',
                            '}catch(e){',
                            '',
                            '}',
                        ]) or set(script_lines) == set([
                            'try{',
                            'window.jQuery = window.$ = require(\'./tyrano/libs/jquery-3.6.0.min.js\');',
                            '}catch(e){',
                            '',
                            '}',
                        ]) or set(script_lines) == set([
                            'try {',
                            'window.jQuery = window.$ = require("./tyrano/libs/jquery-3.6.0.min.js");',
                            '} catch (e) {}',
                        ]) or set(script_lines) == set([
                            'function doScroll() { if (window.pageYOffset === 0) { window.scrollTo(0,1); } }',
                            'window.onload = function() { setTimeout(doScroll, 100); }',
                        ]) or set(script_lines) == set([
                            'function doScroll() {',
                            'if (window.pageYOffset === 0) {',
                            'window.scrollTo(0, 1);',
                            '}',
                            '}',
                            'window.onload = function () {',
                            'setTimeout(doScroll, 100);',
                            '};',
                        ]):
                            score[game_id]['Tyrano'] += 1
                        elif len(script_lines) == 1 and re.search(r'^(?:var (?:game|unity)Instance = )?UnityLoader\.instantiate\("(?:game|unity)Container", "Build\/[^\/"]+\.json"(?:, {onProgress: UnityProgress})?\);$', script_lines[0]):
                            score[game_id]['Unity'] += 1
                        else:
                            score[game_id]['other'] += 1
                            if score[game_id]['Unity'] >= 1:
                                print(game_id, script.string.strip().split('\n')[0].strip()[:120])
                    elif 'src' in script.attrs:
                        assert script.attrs.get('type') in ['text/javascript', 'application/javascript', 'module', None], script
                        if script.attrs['src'].find('@akashic-extension') >= 0:
                            score[game_id]['Akashic'] += 1
                        elif script.attrs['src'] in [
                            '/core/player/js/rpgatsumaru.js',
                        ]:
                            pass
                        elif script.attrs['src'] in [
                            '/core/player-rm200x/index.js',
                            '/core/player-rm200x/atsumaru.js',
                        ]:
                            score[game_id]['EasyRPG'] += 1
                        elif script.attrs['src'] in [
                            'js/rpg_core.js',
                            'js/rpg_managers.js',
                            'js/rpg_objects.js',
                            'js/rpg_scenes.js',
                            'js/rpg_sprites.js',
                            'js/rpg_windows.js',
                            'js/plugins.js',
                            'js/main.js',
                        ]:
                            score[game_id]['RPGMaker'] += 1
                        elif script.attrs['src'] in [
                            'js/libs/babylon.js',
                            'js/libs/phina.js',
                            'js/libs/pixi.js',
                            'js/libs/pixi-particles.js',
                            'js/libs/pixi-particles.min.js',
                            'js/libs/pixi-tilemap.js',
                            'js/libs/pixi-picture.js',
                            'js/libs/pixi-filters.js',
                            'js/libs/fpsmeter.js',
                            'js/libs/lz-string.js',
                            'js/libs/iphone-inline-video.browser.js',
                            'js/libs/filter-shockwave.js',
                            'js/libs/gl-matrix-min.js',
                            'js/libs/jquery-1.10.2.min.js',
                            # gm2909
                            'js/libs/ext_game_lib.js',
                            'js/libs/ptw.js',
                        ]:
                            score[game_id]['RPGMaker'] += 1
                        elif script.attrs['src'] in [
                            './tyrano/libs/jquery-2.0.3.min.js',
                            './tyrano/libs/jquery-3.4.1.min.js',
                            './tyrano/libs/jquery-3.6.0.min.js',
                            './tyrano/libs/jquery-migrate-1.4.1.js',
                            './tyrano/libs/jquery-ui.min.js',
                            './tyrano/libs/jquery-ui/jquery-ui.min.js',
                            './tyrano/libs/jquery.a3d.js',
                            './tyrano/libs/jsrender.min.js',
                            './tyrano/libs/alertify/alertify.min.js',
                            './tyrano/libs/remodal/remodal.js',
                            './tyrano/libs/html2canvas.js',
                            './data/system/KeyConfig.js',
                            './tyrano/lang.js',
                            './tyrano/libs.js',
                            './tyrano/tyrano.js',
                            './tyrano/tyrano.base.js',
                            './tyrano/plugins/kag/kag.js',
                            './tyrano/plugins/kag/kag.event.js',
                            './tyrano/plugins/kag/kag.key_mouse.js',
                            './tyrano/plugins/kag/kag.layer.js',
                            './tyrano/plugins/kag/kag.menu.js',
                            './tyrano/plugins/kag/kag.parser.js',
                            './tyrano/plugins/kag/kag.rider.js',
                            './tyrano/plugins/kag/kag.studio.js',
                            './tyrano/plugins/kag/kag.tag_audio.js',
                            './tyrano/plugins/kag/kag.tag_camera.js',
                            './tyrano/plugins/kag/kag.tag_ext.js',
                            './tyrano/plugins/kag/kag.tag_system.js',
                            './tyrano/plugins/kag/kag.tag_vchat.js',
                            './tyrano/plugins/kag/kag.tag_ar.js',
                            './tyrano/plugins/kag/kag.tag_three.js',
                            './tyrano/plugins/kag/kag.tag_def.js',
                            './tyrano/plugins/kag/kag.tag.js',
                            './tyrano/libs/textillate/assets/jquery.lettering.js',
                            './tyrano/libs/textillate/jquery.textillate.js',
                            './tyrano/libs/jquery.touchSwipe.min.js',
                            './tyrano/libs/howler.js',
                            './tyrano/libs/jsQR.js',
                            './tyrano/libs/anime.min.js',
                            './tyrano/libs/lz-string.min.js',
                        ]:
                            score[game_id]['Tyrano'] += 1
                        elif script.attrs['src'] in [
                            'TemplateData/UnityProgress.js',
                            'Build/UnityLoader.js',
                        ]:
                            score[game_id]['Unity'] += 1
                        elif script.attrs['src'] in [
                            'data/lib/glMatrix.js',
                            'data/lib/pathfinding-browser.min.js',
                            'data/lib/hammer.min.js',
                            'data/lib/linq.min.js',
                            'data/lib/jszip.min.js',
                            'data/lib/live2d.min.js',
                            'data/lib/Live2DFramework.js',
                            'data/lib/sprintf.js',
                            'data/lib/jQuery.js',
                            'data/lib/jQuery.mousewheel.min.js',
                            'data/lib/webfont.js',
                            'data/ENGINE.js',
                            'data/lib/boot.js',
                            'data/SCRIPTS.js',
                        ]:
                            score[game_id]['VisualNovelMaker'] += 1
                        else:
                            score[game_id]['other'] += 1
                            # if score[game_id]['Unity'] >= 1:
                            #     print(game_id, script.attrs['src'])
                    else:
                        print(game_id, script)
                if set(dirnames) == set(['fonts', 'icon', 'js']):
                    score[game_id]['RPGMaker'] += 1
                elif set(dirnames) == set(['css', 'icon', 'js']):
                    score[game_id]['RPGMakerMZ'] += 1

for game_id, game_score in sorted(score.items()):
    game_id = int(game_id)
    is_other = True
    if 1 <= game_score['RPGMakerMZ'] and game_score['RPGMaker'] + game_score['RPGMakerMZ'] == sum(game_score.values()):
        game_score['RPGMakerMZ'] += game_score['RPGMaker']
        game_score['RPGMaker'] = 0
    for framework in frameworks:
        if 1 <= game_score[framework] == sum(game_score.values()):
            framework_games[framework].append(game_id)
            is_other = False
            break
        elif 1 <= game_score[framework] and game_score[framework] + game_score['other'] == sum(game_score.values()):
            framework_games[f'{framework}_2'].append(game_id)
            is_other = False
            break
    if is_other:
        if 1 <= game_score['other'] < sum(game_score.values()):
            print(game_id, dict(sorted(game_score.items(), key=(lambda item: item[1]), reverse=True)[:2]))
            pass
        else:
            print(game_id, game_score['other'])
            pass
        framework_games['other'].append(game_id)

print()
for key in framework_games.keys():
    framework_games[key] = sorted(list(set(framework_games[key])))
    print(key, len(framework_games[key]))

with open('data/catagory.json', 'w') as w:
    json.dump(framework_games, w)